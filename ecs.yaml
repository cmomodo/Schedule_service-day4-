# This CloudFormation template sets up an ECS Cluster for a Sports API application.
# It includes the following resources:
#
# - ECS Cluster: Creates an ECS cluster named 'sports-api-cluster'.
# - VPC: Creates a new VPC with CIDR block 10.0.0.0/16, DNS support, and DNS hostnames enabled.
# - Subnets: Creates two public subnets in different availability zones within the VPC.
# - Internet Gateway: Creates and attaches an Internet Gateway to the VPC.
# - Route Table: Creates a route table and adds a default route to the Internet Gateway.
# - Security Group: Creates a security group allowing HTTP traffic on port 80.
# - Task Definition: Defines an ECS task with a container running the Sports API.
# - IAM Role: Creates an IAM role for ECS task execution with necessary policies.
# - Application Load Balancer (ALB): Creates an ALB with an associated security group.
# - Target Group: Creates a target group for the ALB with health check configuration.
# - Listener: Creates a listener for the ALB to forward traffic to the target group.
# - ECS Service: Creates an ECS service to run the task definition, with load balancer configuration.
#

AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Cluster for Sports API using Default VPC

Resources:
  # VPC
  SportsApiVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: SportsApiVPC
        - Key: Environment
          Value: Production
        - Key: Project
          Value: SportsAPI
        - Key: Owner
          Value: DevOps
        - Key: CostCenter
          Value: Infrastructure

  # Subnets
  SportsApiSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SportsApiVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SportsApiSubnet1
        - Key: Environment
          Value: Production
        - Key: Project
          Value: SportsAPI
        - Key: Type
          Value: Public
        - Key: Tier
          Value: Web

  SportsApiSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SportsApiVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SportsApiSubnet2
        - Key: Environment
          Value: Production
        - Key: Project
          Value: SportsAPI
        - Key: Type
          Value: Public
        - Key: Tier
          Value: Web

  # Internet Gateway
  SportsApiInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SportsApiInternetGateway

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SportsApiVPC
      InternetGatewayId: !Ref SportsApiInternetGateway

  # Route Table
  SportsApiRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SportsApiVPC
      Tags:
        - Key: Name
          Value: SportsApiRouteTable

  # Route to Internet Gateway
  SportsApiRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref SportsApiRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SportsApiInternetGateway

  # Subnet Route Table Association
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SportsApiSubnet1
      RouteTableId: !Ref SportsApiRouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SportsApiSubnet2
      RouteTableId: !Ref SportsApiRouteTable

  # Create an ECS Cluster
  SportsApiCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: sports-api-cluster
      Tags:
        - Key: Name
          Value: SportsApiCluster
        - Key: Environment
          Value: Production
        - Key: Project
          Value: SportsAPI
        - Key: Service
          Value: API
        - Key: Owner
          Value: DevOps

  # Security Group
  SportsApiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId: !Ref SportsApiVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SportsApiSecurityGroup
        - Key: Environment
          Value: Production
        - Key: Project
          Value: SportsAPI
        - Key: Type
          Value: SecurityGroup

  # Task Definition for Sports API
  SportsApiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: sports-api-task
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: sports-api-container
          Image: 449095351082.dkr.ecr.us-east-1.amazonaws.com/sports_api # Replace with your image URI
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              AppProtocol: http
          Environment:
            - Name: NBA_API
              Value: 76ccbdb3040557b11709cd3d4e59a313784a25074d26c3c277d513ba9ad73613 # Replace with actual API key or desired value
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/sports-api
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
              awslogs-create-group: true
      Tags:
        - Key: Name
          Value: SportsApiTaskDef
        - Key: Environment
          Value: Production
        - Key: Project
          Value: SportsAPI
        - Key: Service
          Value: API

  # Create ECS Task Execution Role
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EcsTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  # Create an Application Load Balancer (ALB)
  SportsApiALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: sports-api-alb
      Scheme: internet-facing
      Subnets:
        - !Ref SportsApiSubnet1
        - !Ref SportsApiSubnet2
      SecurityGroups:
        - !Ref SportsApiSecurityGroup
      Type: application
      Tags:
        - Key: Name
          Value: SportsApiALB
        - Key: Environment
          Value: Production
        - Key: Project
          Value: SportsAPI
        - Key: Service
          Value: LoadBalancer

  # Create a target group for the ALB
  SportsApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Ecs-sports-api-service
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref SportsApiVPC
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPort: "8080"
      HealthCheckPath: /sports
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  # Create a listener for the ALB
  SportsApiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SportsApiALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SportsApiTargetGroup

  # ECS Service to run the Task Definition
  SportsApiService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: sports-api-service
      Cluster: !Ref SportsApiCluster
      TaskDefinition: !Ref SportsApiTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SportsApiSubnet1
            - !Ref SportsApiSubnet2
          SecurityGroups:
            - !Ref SportsApiSecurityGroup
      LoadBalancers:
        - ContainerName: sports-api-container
          ContainerPort: 8080
          TargetGroupArn: !Ref SportsApiTargetGroup
      HealthCheckGracePeriodSeconds: 300
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      Tags:
        - Key: Name
          Value: SportsApiService
        - Key: Environment
          Value: Production
        - Key: Project
          Value: SportsAPI
        - Key: Service
          Value: API
        - Key: Owner
          Value: DevOps
    DependsOn:
      - SportsApiListener
      - SportsApiALB
      - SportsApiTargetGroup
      - SportsApiRoute
      - Subnet1RouteTableAssociation
      - Subnet2RouteTableAssociation

# Outputs:
# - SportsApiALBDNS: DNS name of the ALB.
# - SportsApiTargetGroupArn: ARN of the target group.
# - SportsApiServiceName: Name of the ECS service.
Outputs:
  SportsApiALBDNS:
    Description: DNS Name of the Sports API ALB
    Value: !GetAtt SportsApiALB.DNSName

  SportsApiTargetGroupArn:
    Description: ARN of the Sports API Target Group
    Value: !Ref SportsApiTargetGroup

  SportsApiServiceName:
    Description: Name of the Sports API ECS Service
    Value: !Ref SportsApiService

  VpcId:
    Description: ID of the VPC
    Value: !Ref SportsApiVPC

  Subnet1Id:
    Description: ID of Subnet 1
    Value: !Ref SportsApiSubnet1

  Subnet2Id:
    Description: ID of Subnet 2
    Value: !Ref SportsApiSubnet2
