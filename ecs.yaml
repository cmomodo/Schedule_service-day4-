AWSTemplateFormatVersion: "2010-09-09"
Description: Sports API ECS Cluster with ALB, VPC and Subnets

Parameters:
  NBAAPIEndpoint:
    Type: String
    Description: NBA API endpoint URL
    Default: "https://serpapi.com/search.json" # Replace with actual URL when known

Resources:
  # VPC
  SportsAPIVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: sports-api-vpc

  # Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SportsAPIVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sports-api-public-subnet-1

  # Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SportsAPIVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sports-api-public-subnet-2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: sports-api-igw

  # Attach Gateway to VPC
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref SportsAPIVPC

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SportsAPIVPC
      Tags:
        - Key: Name
          Value: sports-api-public-rt

  # Route to Internet
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Subnet Route Table Associations
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ECS Cluster
  SportsAPICluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: sports-api-cluster

  # Add CloudWatch Log Group for container logs
  SportsAPIContainerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/sports-api-container-log-group
      RetentionInDays: 14

  # Task Definition
  SportsAPITaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: sports-api-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: sports-api-container
          Image: 449095351082.dkr.ecr.us-east-1.amazonaws.com/sports-api:sports-api-latest
          PortMappings:
            - ContainerPort: 8080 # changed from 80 to 8080
              Protocol: tcp
          Environment:
            - Name: NBA_API
              Value: !Ref NBAAPIEndpoint
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SportsAPIContainerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: sports-api

  # ECS Service
  SportsAPIService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref SportsAPICluster
      ServiceName: sports-api-service
      TaskDefinition: !Ref SportsAPITaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref SportsAPISecurityGroup
      LoadBalancers:
        - ContainerName: sports-api-container
          ContainerPort: 8080 # changed from 80 to 8080
          TargetGroupArn: !Ref SportsAPITargetGroup

  # Security Group
  SportsAPISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Sports API
      VpcId: !Ref SportsAPIVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  SportsAPIALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: sports-api-alb
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SportsAPISecurityGroup
      Type: application
      IpAddressType: ipv4

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SportsAPIALB
      Port: 8080 # changed from 80 to 8080
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SportsAPITargetGroup

  # Target Group
  SportsAPITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ecs-sports-api-service
      Protocol: HTTP
      Port: 8080 # changed from 80 to 8080
      VpcId: !Ref SportsAPIVPC
      HealthCheckPath: /sports
      TargetType: ip # Add this line
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # VPC Link
  VPCLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: SportsAPIVPCLink
      TargetArns:
        - !Ref SportsAPIALB

Outputs:
  ALBEndpoint:
    Description: URL of the Application Load Balancer
    Value: !GetAtt SportsAPIALB.DNSName
  VPCId:
    Description: VPC ID
    Value: !Ref SportsAPIVPC
  Subnet1Id:
    Description: First Public Subnet ID
    Value: !Ref PublicSubnet1
  Subnet2Id:
    Description: Second Public Subnet ID
    Value: !Ref PublicSubnet2
  VPCLinkId:
    Description: VPC Link ID
    Value: !Ref VPCLink
  ALBFullName:
    Description: Full name of the ALB
    Value: !GetAtt SportsAPIALB.LoadBalancerFullName
